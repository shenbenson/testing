name: API Diff and Release
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  diff-and-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Get API specs and generate JSON files
        if: github.event.pull_request.merged == true
        run: |
          # Get the base (pre-PR) API spec
          git show ${{ github.event.pull_request.base.sha }}:api.yaml > previous.yaml
          yq -o=json previous.yaml > previous.json
          
          # Get the merged (post-PR) API spec
          git show ${{ github.event.pull_request.merge_commit_sha }}:api.yaml > current.yaml
          yq -o=json current.yaml > current.json
          
          # Clean up
          rm previous.yaml current.yaml

      - name: Run API diff
        run: node scripts/api-diff.js

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Generate commit changelog
        run: |
          conventional-changelog -p angular -i CHANGELOG.md -s -r 1 > commit-notes.md

      - name: Determine version
        id: version
        run: |
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          NEW_VERSION="v$MAJOR.$MINOR.$((PATCH+1))"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Combine release notes
        run: |
          {
            echo "# Release ${{ steps.version.outputs.new_version }}"
            echo
            cat commit-notes.md
            echo
            cat release-notes.md
          } > final-release-notes.md

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.new_version }} \
            --title "${{ steps.version.outputs.new_version }}" \
            --notes-file final-release-notes.md
